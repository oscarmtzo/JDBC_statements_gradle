/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jdbcStateGradle;

import org.sqlite.SQLiteDataSource;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {

        System.out.println(new App().getGreeting());
        //First: set the path for sqlite executable within your pc to a String variable
        String url = "jdbc:sqlite:/C:\\Users\\oscamartinez\\sqlite\\westeros.db";

        //Second: Establish connection between Java and SQLite:
        //      A) creating a SQLiteDataSource object (implementation froom DataSource interface, provide by SQLite JDBC driver)
        SQLiteDataSource dataSource = new SQLiteDataSource();

        //Third: set a data source connection URL by calling:
        //      A) SQLiteDataSource.setURL method
        dataSource.setUrl(url);

        //Fourth: declare Connection object and assign it to the return
        //value of the DataSource.getConnection method inside a
        //try-with.resources statement (closes JDBC connection)
        try (Connection connection = dataSource.getConnection()) {
            //Fifth: use if statement and isValid(amount of seconds in Integer) to validate
            //wether connection has not been closed
            //if (connection.isValid(5)){System.out.println("Connection is valid");}

            //Seventh: statement creation create a Statement instance
            // and assign it to the return value of the connection.createStatement()
            try (Statement statement = connection.createStatement()) {

                //Eighth: Use the statement of execution from the Statement instance
                //and use common SQL create queries
                statement.executeUpdate("CREATE TABLE IF NOT EXISTS HOUSES("
                    + "id INTEGER PRIMARY KEY,"
                    + "name TEXT NOT NULL,"
                    + "words TEXT NOT NULL)");

                //Nineth: populate Database with an integer equals to statment.executeUpdate
                // should be using within double quotes single quotes for TEXT values
                // int i will be equal to 3
                /*
                int i = statement.executeUpdate(
                        "INSERT INTO HOUSES VALUES "
                            + "(1, 'Targaryen of King''s Landing', 'Fire and Blood'),"
                            + "(2, 'Stark of Winterfell', 'Summer is Coming'),"
                            + "(3, 'Lannister of Casterly Rock', 'Hear Me Roar!')"
                );*/

                //Tenth: assign an int updating variable the return value of statement.executeUpdate method
                // and as a parameteer of executeUpdate method goes the SQL query
                /*
                int updating = statement.executeUpdate(
                        "UPDATE HOUSES "
                            + "SET words = 'Winter is coming' "
                            + "WHERE id = 2"
                ); */ //comment them out because operations of insert and update have already been done

                //Eleventh: create an instance of ResultSet class in a variable named: greatHouses,
                //this will contain the object of every record within the table
                // assign the variable to the return value of statement.executeQuery("Select * From HOUSES;")
                //surrounded by a try-within-statement
                try (ResultSet greatHouses = statement.executeQuery("SELECT * FROM HOUSES;")){

                    while (greatHouses.next()) {
                        //Twelfth: create a variable of type int id and use the method getInt("id/or name PRIMARY KEY COLUMN")
                        // that is the instance of ResultSet,
                        int id = greatHouses.getInt("id");
                        String name = greatHouses.getString("name");
                        String words = greatHouses.getString("words");
                        System.out.println("Id: " + id);
                        System.out.println("Name: " + name);
                        System.out.println("Words: " + words);
                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println("Succesful Database connection BUT error Inside of statement of execution");
            }
        }
        //Sixth: catch the SQLException
        catch (SQLException e) {
            e.printStackTrace();
            System.out.println("No database connection, check database URL");
        }
    }
}
